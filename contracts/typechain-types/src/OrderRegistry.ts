/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface OrderRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createOrder"
      | "deliveryOracle"
      | "escrow"
      | "markDisputed"
      | "markFunded"
      | "orders"
      | "owner"
      | "releaseEscrow"
      | "releaseEscrowFromShipment"
      | "resolveDispute"
      | "setOracle"
      | "setShipmentRegistry"
      | "shipmentRegistry"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OracleUpdated"
      | "OrderCreated"
      | "ShipmentRegistryUpdated"
      | "StatusUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createOrder",
    values: [BigNumberish, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deliveryOracle",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "escrow", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "markDisputed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "markFunded",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "orders",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "releaseEscrow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseEscrowFromShipment",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "resolveDispute",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setOracle",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setShipmentRegistry",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "shipmentRegistry",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "createOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deliveryOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "escrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "markDisputed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "markFunded", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "orders", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "releaseEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseEscrowFromShipment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resolveDispute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setShipmentRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shipmentRegistry",
    data: BytesLike
  ): Result;
}

export namespace OracleUpdatedEvent {
  export type InputTuple = [oracle: AddressLike];
  export type OutputTuple = [oracle: string];
  export interface OutputObject {
    oracle: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrderCreatedEvent {
  export type InputTuple = [
    orderId: BigNumberish,
    buyer: AddressLike,
    supplier: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    orderId: bigint,
    buyer: string,
    supplier: string,
    amount: bigint
  ];
  export interface OutputObject {
    orderId: bigint;
    buyer: string;
    supplier: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ShipmentRegistryUpdatedEvent {
  export type InputTuple = [shipmentRegistry: AddressLike];
  export type OutputTuple = [shipmentRegistry: string];
  export interface OutputObject {
    shipmentRegistry: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StatusUpdatedEvent {
  export type InputTuple = [orderId: BigNumberish, status: BigNumberish];
  export type OutputTuple = [orderId: bigint, status: bigint];
  export interface OutputObject {
    orderId: bigint;
    status: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface OrderRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): OrderRegistry;
  waitForDeployment(): Promise<this>;

  interface: OrderRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createOrder: TypedContractMethod<
    [
      orderId: BigNumberish,
      buyer: AddressLike,
      supplier: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  deliveryOracle: TypedContractMethod<[], [string], "view">;

  escrow: TypedContractMethod<[], [string], "view">;

  markDisputed: TypedContractMethod<
    [orderId: BigNumberish],
    [void],
    "nonpayable"
  >;

  markFunded: TypedContractMethod<
    [orderId: BigNumberish],
    [void],
    "nonpayable"
  >;

  orders: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint] & {
        buyer: string;
        supplier: string;
        amount: bigint;
        status: bigint;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  releaseEscrow: TypedContractMethod<
    [orderId: BigNumberish],
    [void],
    "nonpayable"
  >;

  releaseEscrowFromShipment: TypedContractMethod<
    [orderId: BigNumberish, courier: AddressLike, courierReward: BigNumberish],
    [void],
    "nonpayable"
  >;

  resolveDispute: TypedContractMethod<
    [orderId: BigNumberish, releaseToSupplier: boolean],
    [void],
    "nonpayable"
  >;

  setOracle: TypedContractMethod<[oracle: AddressLike], [void], "nonpayable">;

  setShipmentRegistry: TypedContractMethod<
    [registry: AddressLike],
    [void],
    "nonpayable"
  >;

  shipmentRegistry: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createOrder"
  ): TypedContractMethod<
    [
      orderId: BigNumberish,
      buyer: AddressLike,
      supplier: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deliveryOracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "escrow"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "markDisputed"
  ): TypedContractMethod<[orderId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "markFunded"
  ): TypedContractMethod<[orderId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "orders"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint] & {
        buyer: string;
        supplier: string;
        amount: bigint;
        status: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "releaseEscrow"
  ): TypedContractMethod<[orderId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "releaseEscrowFromShipment"
  ): TypedContractMethod<
    [orderId: BigNumberish, courier: AddressLike, courierReward: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "resolveDispute"
  ): TypedContractMethod<
    [orderId: BigNumberish, releaseToSupplier: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setOracle"
  ): TypedContractMethod<[oracle: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setShipmentRegistry"
  ): TypedContractMethod<[registry: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "shipmentRegistry"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "OracleUpdated"
  ): TypedContractEvent<
    OracleUpdatedEvent.InputTuple,
    OracleUpdatedEvent.OutputTuple,
    OracleUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OrderCreated"
  ): TypedContractEvent<
    OrderCreatedEvent.InputTuple,
    OrderCreatedEvent.OutputTuple,
    OrderCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ShipmentRegistryUpdated"
  ): TypedContractEvent<
    ShipmentRegistryUpdatedEvent.InputTuple,
    ShipmentRegistryUpdatedEvent.OutputTuple,
    ShipmentRegistryUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "StatusUpdated"
  ): TypedContractEvent<
    StatusUpdatedEvent.InputTuple,
    StatusUpdatedEvent.OutputTuple,
    StatusUpdatedEvent.OutputObject
  >;

  filters: {
    "OracleUpdated(address)": TypedContractEvent<
      OracleUpdatedEvent.InputTuple,
      OracleUpdatedEvent.OutputTuple,
      OracleUpdatedEvent.OutputObject
    >;
    OracleUpdated: TypedContractEvent<
      OracleUpdatedEvent.InputTuple,
      OracleUpdatedEvent.OutputTuple,
      OracleUpdatedEvent.OutputObject
    >;

    "OrderCreated(uint256,address,address,uint256)": TypedContractEvent<
      OrderCreatedEvent.InputTuple,
      OrderCreatedEvent.OutputTuple,
      OrderCreatedEvent.OutputObject
    >;
    OrderCreated: TypedContractEvent<
      OrderCreatedEvent.InputTuple,
      OrderCreatedEvent.OutputTuple,
      OrderCreatedEvent.OutputObject
    >;

    "ShipmentRegistryUpdated(address)": TypedContractEvent<
      ShipmentRegistryUpdatedEvent.InputTuple,
      ShipmentRegistryUpdatedEvent.OutputTuple,
      ShipmentRegistryUpdatedEvent.OutputObject
    >;
    ShipmentRegistryUpdated: TypedContractEvent<
      ShipmentRegistryUpdatedEvent.InputTuple,
      ShipmentRegistryUpdatedEvent.OutputTuple,
      ShipmentRegistryUpdatedEvent.OutputObject
    >;

    "StatusUpdated(uint256,uint8)": TypedContractEvent<
      StatusUpdatedEvent.InputTuple,
      StatusUpdatedEvent.OutputTuple,
      StatusUpdatedEvent.OutputObject
    >;
    StatusUpdated: TypedContractEvent<
      StatusUpdatedEvent.InputTuple,
      StatusUpdatedEvent.OutputTuple,
      StatusUpdatedEvent.OutputObject
    >;
  };
}

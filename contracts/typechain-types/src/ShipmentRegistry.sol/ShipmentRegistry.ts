/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace ShipmentRegistry {
  export type DropApprovalStruct = {
    shipmentId: BytesLike;
    orderId: BigNumberish;
    locationHash: BytesLike;
    claimedTs: BigNumberish;
    distanceMeters: BigNumberish;
  };

  export type DropApprovalStructOutput = [
    shipmentId: string,
    orderId: bigint,
    locationHash: string,
    claimedTs: bigint,
    distanceMeters: bigint
  ] & {
    shipmentId: string;
    orderId: bigint;
    locationHash: string;
    claimedTs: bigint;
    distanceMeters: bigint;
  };

  export type PickupApprovalStruct = {
    shipmentId: BytesLike;
    orderId: BigNumberish;
    locationHash: BytesLike;
    claimedTs: BigNumberish;
  };

  export type PickupApprovalStructOutput = [
    shipmentId: string,
    orderId: bigint,
    locationHash: string,
    claimedTs: bigint
  ] & {
    shipmentId: string;
    orderId: bigint;
    locationHash: string;
    claimedTs: bigint;
  };

  export type ShipmentStruct = {
    buyer: AddressLike;
    supplier: AddressLike;
    courier: AddressLike;
    orderId: BigNumberish;
    pickupCourierSigned: boolean;
    pickupSupplierSigned: boolean;
    dropCourierSigned: boolean;
    dropBuyerSigned: boolean;
    delivered: boolean;
    pickupHash: BytesLike;
    dropHash: BytesLike;
    pickupTs: BigNumberish;
    dropTs: BigNumberish;
  };

  export type ShipmentStructOutput = [
    buyer: string,
    supplier: string,
    courier: string,
    orderId: bigint,
    pickupCourierSigned: boolean,
    pickupSupplierSigned: boolean,
    dropCourierSigned: boolean,
    dropBuyerSigned: boolean,
    delivered: boolean,
    pickupHash: string,
    dropHash: string,
    pickupTs: bigint,
    dropTs: bigint
  ] & {
    buyer: string;
    supplier: string;
    courier: string;
    orderId: bigint;
    pickupCourierSigned: boolean;
    pickupSupplierSigned: boolean;
    dropCourierSigned: boolean;
    dropBuyerSigned: boolean;
    delivered: boolean;
    pickupHash: string;
    dropHash: string;
    pickupTs: bigint;
    dropTs: bigint;
  };
}

export interface ShipmentRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "REWARD_PER_METER"
      | "confirmDrop"
      | "confirmPickup"
      | "eip712Domain"
      | "getShipment"
      | "markEvent"
      | "orderRegistry"
      | "owner"
      | "registerShipment"
      | "updateCourier"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CourierUpdated"
      | "DropApproved"
      | "EIP712DomainChanged"
      | "PickupApproved"
      | "ShipmentEvent"
      | "ShipmentRegistered"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "REWARD_PER_METER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "confirmDrop",
    values: [
      ShipmentRegistry.DropApprovalStruct,
      BytesLike,
      BytesLike,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmPickup",
    values: [ShipmentRegistry.PickupApprovalStruct, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getShipment",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "markEvent",
    values: [BigNumberish, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "orderRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerShipment",
    values: [BytesLike, BigNumberish, AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCourier",
    values: [BytesLike, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "REWARD_PER_METER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmDrop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmPickup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getShipment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "markEvent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "orderRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerShipment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCourier",
    data: BytesLike
  ): Result;
}

export namespace CourierUpdatedEvent {
  export type InputTuple = [shipmentId: BytesLike, courier: AddressLike];
  export type OutputTuple = [shipmentId: string, courier: string];
  export interface OutputObject {
    shipmentId: string;
    courier: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DropApprovedEvent {
  export type InputTuple = [
    shipmentId: BytesLike,
    orderId: BigNumberish,
    locationHash: BytesLike,
    claimedTimestamp: BigNumberish,
    distanceMeters: BigNumberish,
    courierReward: BigNumberish
  ];
  export type OutputTuple = [
    shipmentId: string,
    orderId: bigint,
    locationHash: string,
    claimedTimestamp: bigint,
    distanceMeters: bigint,
    courierReward: bigint
  ];
  export interface OutputObject {
    shipmentId: string;
    orderId: bigint;
    locationHash: string;
    claimedTimestamp: bigint;
    distanceMeters: bigint;
    courierReward: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EIP712DomainChangedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PickupApprovedEvent {
  export type InputTuple = [
    shipmentId: BytesLike,
    orderId: BigNumberish,
    locationHash: BytesLike,
    claimedTimestamp: BigNumberish
  ];
  export type OutputTuple = [
    shipmentId: string,
    orderId: bigint,
    locationHash: string,
    claimedTimestamp: bigint
  ];
  export interface OutputObject {
    shipmentId: string;
    orderId: bigint;
    locationHash: string;
    claimedTimestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ShipmentEventEvent {
  export type InputTuple = [
    orderId: BigNumberish,
    milestone: BigNumberish,
    geohash: string,
    proofHash: BytesLike,
    blockTimestamp: BigNumberish
  ];
  export type OutputTuple = [
    orderId: bigint,
    milestone: bigint,
    geohash: string,
    proofHash: string,
    blockTimestamp: bigint
  ];
  export interface OutputObject {
    orderId: bigint;
    milestone: bigint;
    geohash: string;
    proofHash: string;
    blockTimestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ShipmentRegisteredEvent {
  export type InputTuple = [
    shipmentId: BytesLike,
    orderId: BigNumberish,
    buyer: AddressLike,
    supplier: AddressLike,
    courier: AddressLike
  ];
  export type OutputTuple = [
    shipmentId: string,
    orderId: bigint,
    buyer: string,
    supplier: string,
    courier: string
  ];
  export interface OutputObject {
    shipmentId: string;
    orderId: bigint;
    buyer: string;
    supplier: string;
    courier: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ShipmentRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): ShipmentRegistry;
  waitForDeployment(): Promise<this>;

  interface: ShipmentRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  REWARD_PER_METER: TypedContractMethod<[], [bigint], "view">;

  confirmDrop: TypedContractMethod<
    [
      approval: ShipmentRegistry.DropApprovalStruct,
      courierSignature: BytesLike,
      buyerSignature: BytesLike,
      lineItems: string,
      metadataUri: string
    ],
    [void],
    "nonpayable"
  >;

  confirmPickup: TypedContractMethod<
    [
      approval: ShipmentRegistry.PickupApprovalStruct,
      courierSignature: BytesLike,
      supplierSignature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  eip712Domain: TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;

  getShipment: TypedContractMethod<
    [shipmentId: BytesLike],
    [ShipmentRegistry.ShipmentStructOutput],
    "view"
  >;

  markEvent: TypedContractMethod<
    [
      orderId: BigNumberish,
      milestone: BigNumberish,
      geohash: string,
      proofHash: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  orderRegistry: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  registerShipment: TypedContractMethod<
    [
      shipmentId: BytesLike,
      orderId: BigNumberish,
      buyer: AddressLike,
      supplier: AddressLike,
      courier: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  updateCourier: TypedContractMethod<
    [shipmentId: BytesLike, courier: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "REWARD_PER_METER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "confirmDrop"
  ): TypedContractMethod<
    [
      approval: ShipmentRegistry.DropApprovalStruct,
      courierSignature: BytesLike,
      buyerSignature: BytesLike,
      lineItems: string,
      metadataUri: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "confirmPickup"
  ): TypedContractMethod<
    [
      approval: ShipmentRegistry.PickupApprovalStruct,
      courierSignature: BytesLike,
      supplierSignature: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "eip712Domain"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getShipment"
  ): TypedContractMethod<
    [shipmentId: BytesLike],
    [ShipmentRegistry.ShipmentStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "markEvent"
  ): TypedContractMethod<
    [
      orderId: BigNumberish,
      milestone: BigNumberish,
      geohash: string,
      proofHash: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "orderRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registerShipment"
  ): TypedContractMethod<
    [
      shipmentId: BytesLike,
      orderId: BigNumberish,
      buyer: AddressLike,
      supplier: AddressLike,
      courier: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateCourier"
  ): TypedContractMethod<
    [shipmentId: BytesLike, courier: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "CourierUpdated"
  ): TypedContractEvent<
    CourierUpdatedEvent.InputTuple,
    CourierUpdatedEvent.OutputTuple,
    CourierUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "DropApproved"
  ): TypedContractEvent<
    DropApprovedEvent.InputTuple,
    DropApprovedEvent.OutputTuple,
    DropApprovedEvent.OutputObject
  >;
  getEvent(
    key: "EIP712DomainChanged"
  ): TypedContractEvent<
    EIP712DomainChangedEvent.InputTuple,
    EIP712DomainChangedEvent.OutputTuple,
    EIP712DomainChangedEvent.OutputObject
  >;
  getEvent(
    key: "PickupApproved"
  ): TypedContractEvent<
    PickupApprovedEvent.InputTuple,
    PickupApprovedEvent.OutputTuple,
    PickupApprovedEvent.OutputObject
  >;
  getEvent(
    key: "ShipmentEvent"
  ): TypedContractEvent<
    ShipmentEventEvent.InputTuple,
    ShipmentEventEvent.OutputTuple,
    ShipmentEventEvent.OutputObject
  >;
  getEvent(
    key: "ShipmentRegistered"
  ): TypedContractEvent<
    ShipmentRegisteredEvent.InputTuple,
    ShipmentRegisteredEvent.OutputTuple,
    ShipmentRegisteredEvent.OutputObject
  >;

  filters: {
    "CourierUpdated(bytes32,address)": TypedContractEvent<
      CourierUpdatedEvent.InputTuple,
      CourierUpdatedEvent.OutputTuple,
      CourierUpdatedEvent.OutputObject
    >;
    CourierUpdated: TypedContractEvent<
      CourierUpdatedEvent.InputTuple,
      CourierUpdatedEvent.OutputTuple,
      CourierUpdatedEvent.OutputObject
    >;

    "DropApproved(bytes32,uint256,bytes32,uint64,uint256,uint256)": TypedContractEvent<
      DropApprovedEvent.InputTuple,
      DropApprovedEvent.OutputTuple,
      DropApprovedEvent.OutputObject
    >;
    DropApproved: TypedContractEvent<
      DropApprovedEvent.InputTuple,
      DropApprovedEvent.OutputTuple,
      DropApprovedEvent.OutputObject
    >;

    "EIP712DomainChanged()": TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;
    EIP712DomainChanged: TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;

    "PickupApproved(bytes32,uint256,bytes32,uint64)": TypedContractEvent<
      PickupApprovedEvent.InputTuple,
      PickupApprovedEvent.OutputTuple,
      PickupApprovedEvent.OutputObject
    >;
    PickupApproved: TypedContractEvent<
      PickupApprovedEvent.InputTuple,
      PickupApprovedEvent.OutputTuple,
      PickupApprovedEvent.OutputObject
    >;

    "ShipmentEvent(uint256,uint8,string,bytes32,uint256)": TypedContractEvent<
      ShipmentEventEvent.InputTuple,
      ShipmentEventEvent.OutputTuple,
      ShipmentEventEvent.OutputObject
    >;
    ShipmentEvent: TypedContractEvent<
      ShipmentEventEvent.InputTuple,
      ShipmentEventEvent.OutputTuple,
      ShipmentEventEvent.OutputObject
    >;

    "ShipmentRegistered(bytes32,uint256,address,address,address)": TypedContractEvent<
      ShipmentRegisteredEvent.InputTuple,
      ShipmentRegisteredEvent.OutputTuple,
      ShipmentRegisteredEvent.OutputObject
    >;
    ShipmentRegistered: TypedContractEvent<
      ShipmentRegisteredEvent.InputTuple,
      ShipmentRegisteredEvent.OutputTuple,
      ShipmentRegisteredEvent.OutputObject
    >;
  };
}

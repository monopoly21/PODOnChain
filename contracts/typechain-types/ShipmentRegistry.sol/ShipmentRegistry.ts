/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface ShipmentRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "deliveryOracle"
      | "markDelivered"
      | "markEvent"
      | "orderRegistry"
      | "owner"
      | "setOracle"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Delivered" | "OracleUpdated" | "ShipmentEvent"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "deliveryOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "markDelivered",
    values: [BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "markEvent",
    values: [BigNumberish, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "orderRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setOracle",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "deliveryOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "markDelivered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "markEvent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "orderRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setOracle", data: BytesLike): Result;
}

export namespace DeliveredEvent {
  export type InputTuple = [
    orderId: BigNumberish,
    proofHash: BytesLike,
    blockTimestamp: BigNumberish,
    claimedTimestamp: BigNumberish
  ];
  export type OutputTuple = [
    orderId: bigint,
    proofHash: string,
    blockTimestamp: bigint,
    claimedTimestamp: bigint
  ];
  export interface OutputObject {
    orderId: bigint;
    proofHash: string;
    blockTimestamp: bigint;
    claimedTimestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OracleUpdatedEvent {
  export type InputTuple = [oracle: AddressLike];
  export type OutputTuple = [oracle: string];
  export interface OutputObject {
    oracle: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ShipmentEventEvent {
  export type InputTuple = [
    orderId: BigNumberish,
    milestone: BigNumberish,
    geohash: string,
    proofHash: BytesLike,
    blockTimestamp: BigNumberish
  ];
  export type OutputTuple = [
    orderId: bigint,
    milestone: bigint,
    geohash: string,
    proofHash: string,
    blockTimestamp: bigint
  ];
  export interface OutputObject {
    orderId: bigint;
    milestone: bigint;
    geohash: string;
    proofHash: string;
    blockTimestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ShipmentRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): ShipmentRegistry;
  waitForDeployment(): Promise<this>;

  interface: ShipmentRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  deliveryOracle: TypedContractMethod<[], [string], "view">;

  markDelivered: TypedContractMethod<
    [
      orderId: BigNumberish,
      proofHash: BytesLike,
      claimedTimestamp: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  markEvent: TypedContractMethod<
    [
      orderId: BigNumberish,
      milestone: BigNumberish,
      geohash: string,
      proofHash: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  orderRegistry: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  setOracle: TypedContractMethod<[oracle: AddressLike], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "deliveryOracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "markDelivered"
  ): TypedContractMethod<
    [
      orderId: BigNumberish,
      proofHash: BytesLike,
      claimedTimestamp: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "markEvent"
  ): TypedContractMethod<
    [
      orderId: BigNumberish,
      milestone: BigNumberish,
      geohash: string,
      proofHash: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "orderRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setOracle"
  ): TypedContractMethod<[oracle: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "Delivered"
  ): TypedContractEvent<
    DeliveredEvent.InputTuple,
    DeliveredEvent.OutputTuple,
    DeliveredEvent.OutputObject
  >;
  getEvent(
    key: "OracleUpdated"
  ): TypedContractEvent<
    OracleUpdatedEvent.InputTuple,
    OracleUpdatedEvent.OutputTuple,
    OracleUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ShipmentEvent"
  ): TypedContractEvent<
    ShipmentEventEvent.InputTuple,
    ShipmentEventEvent.OutputTuple,
    ShipmentEventEvent.OutputObject
  >;

  filters: {
    "Delivered(uint256,bytes32,uint256,uint64)": TypedContractEvent<
      DeliveredEvent.InputTuple,
      DeliveredEvent.OutputTuple,
      DeliveredEvent.OutputObject
    >;
    Delivered: TypedContractEvent<
      DeliveredEvent.InputTuple,
      DeliveredEvent.OutputTuple,
      DeliveredEvent.OutputObject
    >;

    "OracleUpdated(address)": TypedContractEvent<
      OracleUpdatedEvent.InputTuple,
      OracleUpdatedEvent.OutputTuple,
      OracleUpdatedEvent.OutputObject
    >;
    OracleUpdated: TypedContractEvent<
      OracleUpdatedEvent.InputTuple,
      OracleUpdatedEvent.OutputTuple,
      OracleUpdatedEvent.OutputObject
    >;

    "ShipmentEvent(uint256,uint8,string,bytes32,uint256)": TypedContractEvent<
      ShipmentEventEvent.InputTuple,
      ShipmentEventEvent.OutputTuple,
      ShipmentEventEvent.OutputObject
    >;
    ShipmentEvent: TypedContractEvent<
      ShipmentEventEvent.InputTuple,
      ShipmentEventEvent.OutputTuple,
      ShipmentEventEvent.OutputObject
    >;
  };
}
